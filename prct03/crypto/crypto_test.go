package crypto_test

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"github.com/danielramosacosta/seguridad/prct03/crypto"
)

var _ = Describe("crypto", func() {
	Describe("KeySchedulingAlgorithm", func() {
		It("initializes f, S and K", func() {
			seed := []byte{0x02, 0x05}
			S := crypto.KeySchedulingAlgorithm(seed)

			Expect(S).To(Equal([]byte{
				0x02, 0x85, 0x0A, 0x4D, 0xCC, 0x22, 0xBB, 0x36, 0x33, 0x47, 0x49, 0x62, 0x93, 0x79, 0xCD, 0xEB,
				0xB4, 0x4F, 0x15, 0xE2, 0x0C, 0xCA, 0x29, 0x2F, 0x4C, 0x26, 0x31, 0x5D, 0x1B, 0xE6, 0x88, 0xEA,
				0x04, 0x87, 0xD1, 0x21, 0xC7, 0xF1, 0x68, 0x45, 0x54, 0x0F, 0xB8, 0xEE, 0xE3, 0x4E, 0x7E, 0xD5,
				0xE4, 0x9E, 0x2D, 0xE9, 0xBC, 0xF6, 0x74, 0x5E, 0x75, 0x40, 0x17, 0x55, 0x86, 0xDC, 0xB3, 0xEC,
				0x7B, 0xAD, 0xC3, 0x65, 0x6E, 0x9C, 0xBA, 0x8C, 0x2B, 0x84, 0xF5, 0x8F, 0xD0, 0x12, 0x77, 0x8B,
				0xF4, 0x6A, 0x7A, 0xD2, 0x70, 0xF2, 0xDA, 0x41, 0x90, 0xA0, 0x00, 0x5C, 0xB9, 0xA6, 0x05, 0xDB,
				0x7F, 0xAE, 0x43, 0x3D, 0xD9, 0x59, 0xAB, 0x34, 0x44, 0x91, 0x10, 0xD8, 0x8D, 0x48, 0x28, 0x13,
				0x3A, 0x03, 0xDE, 0x82, 0x92, 0x39, 0x9A, 0x53, 0x80, 0x76, 0xCF, 0x32, 0xC8, 0xE1, 0xC5, 0xA9,
				0x01, 0x35, 0x61, 0x42, 0x37, 0xD3, 0x38, 0x69, 0xBF, 0xC6, 0xC2, 0x2E, 0x9F, 0xAF, 0x0B, 0xAC,
				0xF7, 0x8E, 0x50, 0x67, 0x95, 0x72, 0xB7, 0xD6, 0x6F, 0xE5, 0xAA, 0x58, 0xE8, 0x06, 0xB6, 0xA4,
				0xD7, 0x6D, 0xA3, 0x8A, 0x63, 0x23, 0xCE, 0xE7, 0xC4, 0x56, 0x78, 0x1F, 0xF0, 0x60, 0x4B, 0x81,
				0xC1, 0x1D, 0x24, 0xFC, 0x6C, 0xE0, 0x0E, 0x98, 0xBE, 0xBD, 0x96, 0x20, 0xF8, 0x71, 0x1C, 0x2A,
				0xA2, 0x11, 0x83, 0xB0, 0x27, 0x3F, 0x3C, 0x46, 0xB5, 0xC0, 0x9B, 0x57, 0x18, 0x97, 0x2C, 0xD4,
				0xB1, 0x0D, 0x5A, 0x08, 0x66, 0xFB, 0x5F, 0x7C, 0x16, 0xF9, 0xFF, 0x14, 0x73, 0xCB, 0xED, 0xFE,
				0x94, 0x64, 0x51, 0xA8, 0x9D, 0x89, 0x1E, 0xF3, 0x7D, 0x1A, 0x6B, 0x19, 0xFD, 0xA1, 0x07, 0xA7,
				0x25, 0xEF, 0x52, 0x3E, 0xDD, 0xC9, 0x30, 0xA5, 0xDF, 0x09, 0xB2, 0xFA, 0x3B, 0x4A, 0x99, 0x5B,
			}))
		})
		It("initializes f, S and K", func() {
			seed := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}
			S := crypto.KeySchedulingAlgorithm(seed)

			expectedS := []byte{
				0x01, 0x38, 0x6B, 0x3D, 0xAC, 0x47, 0xE5, 0x1B, 0x8B, 0x10, 0xE8, 0xD1, 0x66, 0x26, 0xF9, 0xE7,
				0xC9, 0x35, 0x7B, 0x0E, 0x55, 0x4A, 0x2A, 0x4F, 0xE1, 0x94, 0x48, 0x22, 0xD2, 0x21, 0x43, 0x60,
				0x23, 0x15, 0x14, 0xEB, 0x68, 0x6D, 0x33, 0x82, 0xF1, 0x77, 0x0C, 0xF8, 0xAD, 0x93, 0x80, 0xCF,
				0xC5, 0x56, 0x8C, 0x92, 0xE3, 0x9F, 0x40, 0xCE, 0x09, 0xB8, 0x99, 0xC8, 0x5A, 0x5C, 0x50, 0x7D,
				0x13, 0x74, 0x4C, 0xA6, 0x73, 0xDD, 0x59, 0x0B, 0x1C, 0x52, 0x41, 0xC7, 0x9C, 0x19, 0xAF, 0xED,
				0xEF, 0x81, 0x27, 0xD5, 0xE0, 0x54, 0xD3, 0xE4, 0x07, 0x9D, 0xFC, 0xFE, 0x91, 0x20, 0x45, 0xF7,
				0x6E, 0x03, 0x08, 0xDB, 0x61, 0x62, 0xFB, 0xB2, 0xBA, 0x9B, 0x72, 0x39, 0x1E, 0x46, 0x70, 0xBE,
				0xCA, 0x25, 0x17, 0xCC, 0x1F, 0x2D, 0x31, 0xB6, 0x28, 0xB3, 0x1D, 0x7F, 0x3F, 0xF5, 0x44, 0x8A,
				0x0D, 0x84, 0xBD, 0xFD, 0xB4, 0x00, 0x8F, 0x58, 0x02, 0x5F, 0xCD, 0xBF, 0x63, 0x2E, 0x6F, 0x36,
				0xA8, 0x34, 0x6C, 0x85, 0x53, 0xC4, 0x71, 0x3A, 0x05, 0x95, 0x4E, 0xA5, 0x7E, 0x30, 0xB1, 0x9E,
				0x86, 0x5E, 0xA4, 0xAE, 0x2C, 0xD0, 0xCB, 0xB5, 0x5D, 0x1A, 0xE9, 0x5B, 0x8D, 0x65, 0x9A, 0x11,
				0x78, 0xC0, 0x7A, 0xD4, 0x06, 0x83, 0xB0, 0xE2, 0xD6, 0x75, 0x37, 0x4B, 0x49, 0xDC, 0xDF, 0x8E,
				0x16, 0x69, 0x29, 0x18, 0x76, 0xAA, 0x67, 0xEA, 0xA9, 0x24, 0xA3, 0xD9, 0x98, 0x2F, 0x3B, 0xD8,
				0x79, 0x12, 0xEE, 0xC2, 0xB9, 0xF4, 0xE6, 0xF6, 0x3E, 0xBC, 0xBB, 0x3C, 0xA0, 0x88, 0xDE, 0x57,
				0x96, 0x87, 0xC1, 0x04, 0xDA, 0xC6, 0x97, 0x0A, 0x2B, 0x51, 0x4D, 0xD7, 0xB7, 0x7C, 0xF3, 0xFF,
				0xF0, 0xF2, 0xAB, 0xFA, 0x64, 0x90, 0xEC, 0xC3, 0x89, 0xA2, 0x32, 0xA1, 0x42, 0xA7, 0x0F, 0x6A,
			}

			Expect(S).To(Equal(expectedS))
		})
	})
	Describe("PseudoRandomGenerationAlgorithm", func() {
		It("initializes f, S and K", func() {
			seed := []byte{0x02, 0x05}
			i := byte(0)
			f := byte(0)
			S := crypto.KeySchedulingAlgorithm(seed)

			generatedByte, i, f, S := crypto.PseudoRandomGenerationAlgorithm(i, f, S)
			Expect(generatedByte).To(Equal(byte(0x90)))

			generatedByte, i, f, S = crypto.PseudoRandomGenerationAlgorithm(i, f, S)
			Expect(generatedByte).To(Equal(byte(0x0E)))
		})
	})
})
